清空文件
cat /dev/null > wordcount
:>wordcount
判断上一条命令是否执行成功 $?
获取上一条命令执行结果 dir=`pwd`          或者       dir=$(pwd)
free -h -s 3     每3秒显示内存信息
显示文件的全部信息(可显示换行)cat -v filename
tr -s ' ' 将 将重复的空格以一个空格显示,tr -s 't' 将重复的t以一个t显示
cut -d' ' -f 1   以空格作为分隔符并且取第一列
vim查找上一个N,查找下一个n
vim清空所有内容 dg
df命令
    df -h
    df -T 显示文件系统类型
查看当前目录空间占用空间大小 du -h --max-depth=0
删除特定文件 rm -rf A-[0-9][0-9][0-9].zip
切分大文件
    split -l 100 bigfile prefix
    split -b 10m bigfile prefix
查看Linux虚拟机内存和处理器信息
    cat /proc/cpuinfo
    cat /proc/meminfo
find命令
    find . -type f -size -3k -exec ls -l {} \;  查找大小3k以内的文件并显示
    find . -type f -size +3k -exec ls -l {} \;  查找大小3k以上的文件并显示
cat命令
    cat -v 显示特殊字符
    cat -n 显示行号
tail命令
    tail -f file
    tail -10 file显示最后十行数据
head命令
    head -10 file显示前10行数据
tr命令
    tr a-z A-Z
    tr -s ' '压缩多个空格为一个空格
    tr -s ' ' '\n'先用换行符替换空格,然后再压缩连续的换行符
Linux输出结果逆序
    ll -t | tac
tail当前目录最新文件
    tail -f `ll -t | awk "NR==2" | tr -s ' ' | cut -d ' ' -f 9`
    awk "NR==2"输出第二行数据
    ll -t 按日期排序
    tr -s ' ' 压缩空格
    cut -d ' ' -f 9 以空格分割字符并且截取第九列
sort命令
    sort -r逆序输出
    sort file 以ASCII排序
    sort -u 排序并去重
    sort -nk 2 -t: file  将文件每一行的内容以:分割,对第二列进行排序,以数字的形式
ps命令
    ps aux
    查看当前系统进程的uid,pid,stat,pri, 以uid号排序.
    ps -eo pid,stat,pri,uid –sort uid
    查看当前系统进程的user,pid,stat,rss,args, 以rss排序.
    ps -eo user,pid,stat,rss,args –sort rss
    ps aux
netstat命令
    netstat -ntlp
strings命令
    在要给二进制文件中查找指定字符串
strace命令    跟踪程序运行时的系统调用
    strace常用来跟踪进程执行时的系统调用和所接收的信号。
    在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，
    必须由用户态模式切换至内核态模式，通 过系统调用访问硬件设备。
    strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。
    strace -T -tt -e trace=all -p pid
pmap命令
    显示进程内存中的地址映射
awk命令
    awk '{print $1,$2}'  显示第一列和第二列
    awk -F ':' '{print $1 $2}'  以':'做为分隔符
    awk 'BEGIN{count=0;print "start count"}{count++;print $0}END{print "total user num is:" count}' /etc/passwd

iostat命令
    iostat -d 2 6    每隔两秒输出io信息,总共输出6次
vmstat命令
    vmstat -d 2 6    每隔两秒输出cpu信息,总共输出6此
od命令
    输出文件的二进制内容
    od -to1 fileName    八进制(一字节作为一个单元)
    od -to2 fileName    八进制(两字节作为一个单元)
    od -td1 fileName    十进制(一字节作为一个单元)
    od -td2 fileName    十进制(两字节作为一个单元)
    od -tx1 fileName    十六进制(一字节作为一个单元)
    od -tx2 fileName    十六进制(两字节作为一个单元)
xxd命令
    输出原始二进制信息(od命令可能和大小端字节序有关)
    xdd fileName
read命令
    cat file.txt | while read line
    do
        echo "$line"
    done
shell同步和异步
    sh start.sh &   异步运行
    正常在shell中调用其他脚本是同步运行
    使用wait可以等待其他shell脚本运行结束
nl命令
    类似于cat+vim的set nu
    输出文件并带上行号
shell中的特殊符号
    $0	当前脚本的文件名
    $n	传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。
    $#	传递给脚本或函数的参数个数。
    $*	传递给脚本或函数的所有参数。
    $@	传递给脚本或函数的所有参数。被双引号(" ")包含时，与 $* 稍有不同。
    $?	上个命令的退出状态，或函数的返回值。
    $$	当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。
grep命令
    grep -n                 输出时带上行号
    grep -v                 反向选择
    grep -i                 忽略大小写
    nl data | grep 'go$'    输出以go开头的行
    nl data | grep '^c++'   输出以c++开头的行
sed命令
    增删改查
    在第几行增加数据
    查找并更新
    查找并删除
    查找并增加
    sed '/^\s*$/d' data     删除文件中的空行 ^表示文件开头,$表示文件结尾,\s表示空格,/d表示删除

    sed -n 18p fileName 查看第18行数据
    sed -n '1,8p' fileName 查看第1-8行数据
shell传递参数
    $1 $2 $3
shell截取字符串
    ${string:start:len}
    获取字符串长度
    ${#string}
shell循环
    for((i=0;i<10;i++))
    do
    echo $i
    done

    while [ true ]
    do

    done
shell函数
    cutDemo(){
            ls | cut -b 3-5
            ls | cut -b -3
            ls | cut -b -3,3-
    }
    echo 'execute cutDemo function...'
    cutDemo
    echo 'cutDemo function finished...'
shell双引号和单引号
    [root@fcy shell]# name=fcy
    [root@fcy shell]# echo 'hello $name'
    hello $name
    [root@fcy shell]# echo "hello $name"
    hello fc
    双引号中变量输出值,单引号中变量名无效
shell数组
    array=(1 2 3 4 5 6 7 8)
    输出第一个元素
    echo ${array[0]}
    输出所有元素
    echo ${array[*]}
    echo ${array[@]}
    输出数组长度
    echo ${#array[*]}
    echo ${#array[@]}
查找特定文件并删除
    格式:find   path   -option   [   -print ]   [ -exec   -ok   command ]   {} \;
    find ./ -mtime +32 -name *.java -exec rm -rf {}
    find ./ -mtime -1 -name *.java -exec rm -rf {}
    find ./ -mtime 1 -name *.java -exec rm -rf {}
    find ./ -mtime +1 -name *.java -exec rm -rf {}
shell文件的三个时间
    atime(access time)   最后访问时间
    ctime(change time)   最后变更时间(文件属性,文件的metadata被修改时)
    mtime(modify time)   最后修改时间
stat filename查看文件信息
0   标准输入
1   标准输出
2   错误输出
ls a.txt 1>success.txt 2>error.txt  将标准输出输出到success.txt文件,标准错误输出到error.txt
其中1可以省略,所以可以写成 ls a.txt > success.txt 2>error.txt

ls a.txt b.txt 1>success.txt 2>&1 将标准错误和标准输出输出到success.txt文件
如果写成了
ls a.txt b.txt 2>&1 2>success.txt   则会将标准错误输出到控制台上
也就是从最靠近最终输入的写起

shell控制语句
    if [ $num -gt 1 ]
    then

    else

    fi

-eq     ==
-ne     !=
-gt     >
-lt     <
-ge     >=
-le     <=

top -H -p <pid>查看指定进程的线程信息
    top中相关参数含义
    VIRT    所有使用的未使用的内存总和
    RES     实际使用的内存量
    SHR     和其他进程共享的内存
ps -T -p <pid>查看指定进程的所有线程

sync 命令将所有未写的系统缓冲区写到磁盘中，包含已修改的 i-node、已延迟的块 I/O 和读写映射文件)

free 命令中的信息都来自于 /proc/meminfo 文件
free命令详解
              total        used        free      shared  buff/cache   available
Mem:           972M        437M        409M        7.6M        125M        379M
Swap:          2.0G        264K        2.0G
free表示真正空闲的内存
echo 1 > /proc/sys/vm/drop_caches当然，这个文件可以设置的值分别为1、2、3。它们所表示的含义为：echo 1 > /proc/sys/vm/drop_caches：表示清除 page cache。echo 2 > /proc/sys/vm/drop_caches：表示清除回收 slab 分配器中的对象（包括目录项缓存和 inode 缓存）。slab 分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的 page cache。echo 3 > /proc/sys/vm/drop_caches：表示清除 page cache 和 slab 分配器中的缓存对象。

buff/cache
A buffer is something that has yet to be "written" to disk. A cache is something that has been "read" from the disk and 
stored for later use.
	buff是缓冲,还未写入到磁盘的脏数据
	cache是方便读取

Inode节点
 磁盘分为许多个INode节点
 每个iNode节点都有编号
 INode节点信息
 stat查看文件的INode信息
	File		'Dockerfile'		文件名
	Size		'422'				文件大小
	Blocks		'8'					文件块
	IO Block	'4096'				
	Device		'fd01h/64769d'		设备
	Inode		2108221				Inode号
	Links		1					链接数
	Access		(0644/-rw-r--r--)	访问权限
	Uid			(0/root)			用户id
	Gid			(0/root)			组id
	Access		2018-11-22 21:45:09	上次访问时间
	Modify							上次修改时间
	Change							元数据的修改时间
	Birth							创建时间
目录也是一种文件,结构简单,就是一系列目录项列表,每个目录项由两部分组成
	所包含文件的文件名
	改文件名对于的inode号码
硬连接
	在inode节点的链接上加一,然后以另一个文件名访问该节点的数据,该该文件的内容修改会影响所有的文件名,但是删除一个文件名,并不一定会删除该文件,只是把该inode节点的链接数减一,如果该inode节点的链接数为0,则系统会回收该节点,但是并不会清楚该节点的数据,只有当其他数据需要存储在该节点的时候这里的数据才会被覆盖掉
	目录文件的链接数
		创建一个目录的时候,会默认生成两个目录项, .和..,
		前者的inode就是当前目录文件的inode号码
		后者的inode就是当前目录的父目录的inode号码
		等同于硬连接
		所以一个目录的硬链接总数等于其子目录项加上2
软链接就是文件的内容是是另一个文件的路径,相当于windows下的快捷方式
系统indoe是有限的,所以可能系统空间还够但不能存放数据,
文件夹太多了,每创建一个文件都需要一个inode节点
由于每个文件都必须有一个inode，因此有可能发生inode已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。
yum remove mysql*
rpm -qa|grep -i mysql   查找系统的有关于mysql的文件
rpm -e -nodeps 包名删除mysql有关软件
rpm -qa|grep -i mysql来确认系统中是否还含有mysql相关的文件
rpm -ql php71-php-fpm-7.1.2-1.el6.remi.x86_64    yum 安装的程序 安装到哪里了？

安装文件传输命令lrzsz
yum install -y lrzsz
使用该命令
直接键入rz则会弹出一个文件窗口,然后选择需要传输的文件

mysql的连接方式有两种：

1.tcp/ip方式
先说说这种方式，这个方式是在tcp/ip上建立一个网络连接请求，
即MySQL服务器和客户端不再同一个服务器上，需要通过网络（IP）形式去连接。
但是这种连接需要mysql服务器给这台客户端IP进行授权，否则不可以连接。
如mysql服务器是192.168.10.230，客户端IP是192.168.10.220
授权：grant all on *.* to 'root'@'192.168.10.220' identified by '123456';
连接：mysql -uroot -h192.168.2.230 -p ? ? ? ? ? ? ##-h是指定连接服务器
这种方式是不需要在客户端安装mysql的，即mysql的服务器安装完成后，就默认建立了一个和任何客户端进行连接的通道。
2.socket方式
这种方式必须是客户端和mysql服务器在同一台服务器上，使用localhost的方式去连接，
这样就会用到套接字文件socket，即主机名是localhost的服务器，
客户端通过套接字文件mysql.sock文件连接到服务器，
如果这个文件删除就不能连接。

mysql设置远程登录，修改host字段为'%'

centos7安装mysql
直接用yum -y install mysql mysql-server会出现No package mysql-server available错误
可以先键入下面两个命令
	wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
	rpm -ivh mysql-community-release-el7-5.noarch.rpm
然后在安装mysql
	yum -y install mysql mysql-server

开启mysql 
	systemctl start mysqld
进入mysql
	mysql -uroot
改密码
	set password for root@localhost=password('123');
	mysqldadmin -uroot -p123456 password 123;
	update user set password=password('123') where user='root' and host='localhost';
	flush privileges;
忘记密码
	关闭mysql
	进入mysql的bin目录
	打开cmd
	键入 mysqld --skip-grant-tables,意思是跳过权限认证
	然后新开一个cmd
	然后进入mysql修改密码
	最后需要刷新权限:flush privileges;
mysql的默认配置文件
	F:\mysql\bin\mysqld --defaults-file="F:\mysql\my-default.ini" MySQL
	在注册表中修改ImagePage的值为以上值
	最后的MYSQL是服务名称
	
cmd链接远程数据库    mysql -uroot -proot -h120.79.158.25 -P3306 -Ddatabasename
		P,D要大写
mysql导出SQL文件(将数据库导出为SQL文件)
		mysqldump -uroot -p shopping > shop.sql
1.将数据库mydb导出到e:\mysql\mydb.sql文件中：
打开开始->运行->输入cmd    进入命令行模式
c:\>mysqldump -h localhost -u root -p mydb >e:\mysql\mydb.sql
然后输入密码，等待一会导出就成功了，可以到目标文件中检查是否成功。
2.将数据库mydb中的mytable导出到e:\mysql\mytable.sql文件中：
c:\>mysqldump -h localhost -u root -p mydb mytable>e:\mysql\mytable.sql
3.将数据库mydb的结构导出到e:\mysql\mydb_stru.sql文件中：
c:\>mysqldump -h localhost -u root -p mydb --add-drop-table >e:\mysql\mydb_stru.sql
四.从外部文件导入数据到数据库中：
从e:\mysql\mydb2.sql中将文件中的SQL语句导入数据库中：
1.从命令行进入mysql，然后用命令CREATE DATABASE mydb2;创建数据库mydb2。
2.退出mysql 可以输入命令exit；或者quit；
3.在CMD中输入下列命令：
c:\>mysql -h localhost -u root -p mydb2 < e:\mysql\mydb2.sql
然后输入密码，就OK了。

开机自启动
	将shell脚本的路径添加到/etc/rc.local文件中
服务相关目录
    /etc/init.d/   chkconfig命令就是对其进行增删改查
    chkconfig --list
    chkconfig --add
    chkconfig --del

测试端口是否开放
telnet ip port
curl ip:port
wget ip:port
wireshark抓取本机回环数据
net start npf
route add 192.168.43.176 mask 255.255.255.255 192.168.43.1  metric 1
打开wireshark选择本地回环网卡

